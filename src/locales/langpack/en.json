{
    "start_button": "Get Started",
    "input.": "Token",
    "input.token": "Enter a class token",
    "generate.token": "Generate a token",
    "closed": "Close",
    "next": "Next",
    "submit": "Submit",
    "add": "Add",

    "gtoken": "Classroom Entry Token (For students)",
    "itoken": "Classroom Management Token (Instructor ONLY!)",

    "detail.1.1": "Upload the source codes.",
    "detail.1.2": "They can be .zip file or Github URL.",
    "detail.2.1": "Submitted tasks are graded with static analysis,",
    "detail.2.2": "scoring criteria, and multiple test cases.",
    "detail.3.1": "Use the chart", 
    "detail.3.2": "to visualize the results.",

    "entrance.class title": "ENTRANCE",
    "entrance.class detail": "Enter the classroom using the class token you received in advance.",

    "entrance.instructor title": "Are you an instructor?",
    "entrance.instructor detail.1": "Follow these steps",
    "entrance.instructor detail.2": "to create a class.",
    "entrance.instructor detail.3": "Do you already have a token?",
    "entrance.instructor detail.4": "Enter a token to manage your class!",
    "entrance.instructor.tdialog.1": "Set up tokens",
    "entrance.instructor.tdialog.e": "If you check ",
    "entrance.instructor.tdialog.2": "Direct Feedback",
    "entrance.instructor.tdialog.3": ", all grading results will be provided to students immediately.",
    "entrance.instructor.tdialog.4": "Otherwise, the results are stored only in the database and are not visible to students.",
    "package path": "Package path",
    "class name": "Class Name",
    "method name": "Method Name",
    "interface name": "Interface Name",
    "instructor name": "Instructor Name",

    "dialog.1": "Grading policy",
    "dialog.2": "Select which details to examine using static analysis.",

    "policy.basic.deduct.boolean": "Deduction for violation",
    "policy.basic.deduct": "Deduction per violation",
    "policy.basic.max": "Maximum deduction",
    "policy.class.1": "Required Classes",
    "policy.class.2": "Is there a required class?",
    "policy.compiled.1": "Compilation Status",
    "policy.compiled.2": "The compilation, which is the basis of grading, must be done, right?",
    "policy.custom.ds.1": "Customized Data Structure Class",
    "policy.custom.ds.2": "Should there be a data structure class defined by user?",
    "policy.custom.ex.1": "Customized Exception Class",
    "policy.custom.ex.2": "Should there be an exception class defined by user?",
    "policy.encap.1": "Encapsulation Enabled",
    "policy.encap.2": "Determine whether the codes were followed encapsulation rules using proper Access modifiers.",
    "policy.interface.1": "Interface Inheritance",
    "policy.interface.2": "Determine whether the interface is created and inherited properly.",
    "policy.io.1": "Test Cases",
    "policy.io.2": "Add cases to check as the program executes the submitted code.",
    "policy.io.input": "Input",
    "policy.io.output": "Output",
    "policy.javadoc.1": "Javadoc Settings",
    "policy.javadoc.2": "All 'public' fields and methods must have javadoc.",
    "policy.overloading.1": "Overloading check",
    "policy.overloading.2": "Which method should be overloaded?",
    "policy.overriding.1": "Overriding check",
    "policy.overriding.2": "Which method should be overrided?",
    "policy.package.1": "Required Packages",
    "policy.package.2": "Enter to specify package path!",
    "policy.super.1": "Superclass Inheritance",
    "policy.super.2": "Determine whether the superclass is inherited properly.",
    "policy.thread.1": "Thread Settings",
    "policy.thread.2": "Determine whether the thread class was inherited and actually used.",

    "begin.getting start": "Let's Get Started!",
    "begin.enter token": "Enter the authentication token",
    "begin.enter token rest": "to enter the opened class.",
    "begin.enter generate pre": "Would you like to open a class?",
    "begin.enter generate token": "Generate an authentication token",
    "begin.enter generate rest": " and distribute it!"
}